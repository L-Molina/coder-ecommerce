{"ast":null,"code":"var _jsxFileName = \"/Users/usuario/Desktop/coder-ecommerce-master/src/context/CartContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nexport const CartContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [cart, setCart] = useState([]);\n  console.log(cart);\n\n  const addItem = productToAdd => {\n    setCart([...cart, productToAdd]);\n  };\n\n  const getQuantity = () => {\n    let count = 0;\n    cart.forEach(prod => {\n      count += prod.quantity;\n    });\n    return count;\n  };\n\n  const isInCart = id => {\n    return cart.some(prod => prod.id === id);\n  };\n\n  const getTotalPrice = () => {\n    let TotalPrice = 0;\n    cart.forEach(prod => {\n      TotalPrice += prod.quantity * prod.price;\n    });\n    return TotalPrice;\n  };\n\n  const clearCart = () => {\n    setCart([]);\n  };\n\n  const removeItem = id => {\n    const products = cart.filter(prod => prod.id !== id);\n    setCart(products);\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addItem,\n      getQuantity,\n      isInCart,\n      clearCart,\n      removeItem,\n      getTotalPrice\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CartContextProvider, \"ZqFaEIYkzI5UoYUmTgmqHbYYm/0=\");\n\n_c = CartContextProvider;\nexport default CartContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartContextProvider\");","map":{"version":3,"sources":["/Users/usuario/Desktop/coder-ecommerce-master/src/context/CartContext.js"],"names":["createContext","useState","CartContext","CartContextProvider","children","cart","setCart","console","log","addItem","productToAdd","getQuantity","count","forEach","prod","quantity","isInCart","id","some","getTotalPrice","TotalPrice","price","clearCart","removeItem","products","filter"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;;AAEA,MAAMC,WAAW,gBAAGF,aAAa,EAAjC;AAEA,OAAO,MAAMG,mBAAmB,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACjD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;;AAEA,QAAMI,OAAO,GAAIC,YAAD,IAAkB;AAC9BJ,IAAAA,OAAO,CAAC,CAAC,GAAGD,IAAJ,EAAUK,YAAV,CAAD,CAAP;AACH,GAFD;;AAIA,QAAMC,WAAW,GAAG,MAAM;AACtB,QAAIC,KAAK,GAAG,CAAZ;AACAP,IAAAA,IAAI,CAACQ,OAAL,CAAaC,IAAI,IAAI;AACjBF,MAAAA,KAAK,IAAIE,IAAI,CAACC,QAAd;AACH,KAFD;AAIA,WAAOH,KAAP;AACH,GAPD;;AAQA,QAAMI,QAAQ,GAAIC,EAAD,IAAQ;AACrB,WAAOZ,IAAI,CAACa,IAAL,CAAUJ,IAAI,IAAIA,IAAI,CAACG,EAAL,KAAYA,EAA9B,CAAP;AACH,GAFD;;AAIA,QAAME,aAAa,GAAG,MAAM;AACxB,QAAIC,UAAU,GAAG,CAAjB;AACAf,IAAAA,IAAI,CAACQ,OAAL,CAAaC,IAAI,IAAI;AACjBM,MAAAA,UAAU,IAAKN,IAAI,CAACC,QAAL,GAAgBD,IAAI,CAACO,KAApC;AACH,KAFD;AAGA,WAAOD,UAAP;AACH,GAND;;AAQA,QAAME,SAAS,GAAG,MAAM;AACpBhB,IAAAA,OAAO,CAAC,EAAD,CAAP;AACH,GAFD;;AAIA,QAAMiB,UAAU,GAAIN,EAAD,IAAQ;AACvB,UAAMO,QAAQ,GAAInB,IAAI,CAACoB,MAAL,CAAYX,IAAI,IAAIA,IAAI,CAACG,EAAL,KAAYA,EAAhC,CAAlB;AACAX,IAAAA,OAAO,CAACkB,QAAD,CAAP;AACH,GAHD;;AAKA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AACzBnB,MAAAA,IADyB;AAEzBI,MAAAA,OAFyB;AAGzBE,MAAAA,WAHyB;AAIzBK,MAAAA,QAJyB;AAKzBM,MAAAA,SALyB;AAMzBC,MAAAA,UANyB;AAOzBJ,MAAAA;AAPyB,KAA7B;AAAA,cASKf;AATL;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH,CAlDM;;GAAMD,mB;;KAAAA,mB;AAoDb,eAAeD,WAAf","sourcesContent":["import { createContext, useState } from \"react\";\n\nconst CartContext = createContext()\n\nexport const CartContextProvider = ({ children }) => {\n    const [cart, setCart] = useState([])\n    console.log(cart)\n\n    const addItem = (productToAdd) => {\n        setCart([...cart, productToAdd])\n    }\n    \n    const getQuantity = () => {\n        let count = 0\n        cart.forEach(prod => {\n            count += prod.quantity\n        })\n\n        return count\n    }\n    const isInCart = (id) => {\n        return cart.some(prod => prod.id === id )\n    }\n\n    const getTotalPrice = () => {\n        let TotalPrice = 0\n        cart.forEach(prod => {\n            TotalPrice += (prod.quantity * prod.price)\n        })\n        return TotalPrice\n    } \n\n    const clearCart = () => {\n        setCart([])\n    }\n\n    const removeItem = (id) => {\n        const products =  cart.filter(prod => prod.id !== id)\n        setCart(products)\n    }\n\n    return (\n        <CartContext.Provider value={{\n            cart,\n            addItem,\n            getQuantity,\n            isInCart,\n            clearCart,\n            removeItem,\n            getTotalPrice\n        }}>\n            {children}\n        </CartContext.Provider>\n    )\n}\n\nexport default CartContext"]},"metadata":{},"sourceType":"module"}